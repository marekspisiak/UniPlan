generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId], map: "EmailVerificationToken_userId_fkey")
}

model User {
  id                 Int                      @id @default(autoincrement())
  email              String                   @unique
  password           String
  createdAt          DateTime                 @default(now())
  firstName          String
  lastName           String
  lastVerifiedAt     DateTime?
  verificationTokens EmailVerificationToken[]
  events             Event[]                  @relation("UserEvents")
  interests          Category[]               @relation("UserInterests")
  joinedEvents Event[] @relation("EventParticipants")
  subscribedEvents Event[] @relation("EventSubscribers")  

  moderatorIn EventModerator[]

}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  time        String
  endTime     String?
  location    String
  capacity    Int?
  mainImage   String?
  gallery     EventImage[]
  createdAt   DateTime @default(now())


  // VZŤAHY
  seriesId     String
  series       EventSeries @relation(fields: [seriesId], references: [id])
  categories   Category[] @relation("EventCategories")
  organizer    User       @relation("UserEvents", fields: [organizerId], references: [id])
  organizerId  Int
  participants User[]     @relation("EventParticipants")
  subscribers  User[]     @relation("EventSubscribers")

}


model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  label  String
  icon   String?
  events Event[] @relation("EventCategories")
  users  User[]  @relation("UserInterests")
}

model EventImage {
  id      Int    @id @default(autoincrement())
  url     String
  eventId Int
  event   Event  @relation(fields: [eventId], references: [id])

  @@index([eventId], map: "EventImage_eventId_fkey")
}

model EventModerator {
  id                   Int      @id @default(autoincrement())
  userId               Int
  user                 User     @relation(fields: [userId], references: [id])

  seriesId             String
  series               EventSeries @relation("ModeratorSeries", fields: [seriesId], references: [id])

  canEditEvent         Boolean @default(false)
  canManageParticipants Boolean @default(false)
  canManageSubscribers  Boolean @default(false)
  canManageModerators   Boolean @default(false)
  canRepostEvent        Boolean @default(false)

  @@unique([seriesId, userId])
}

model EventSeries {
  id         String            @id @default(uuid())
  events     Event[]
  moderators EventModerator[] @relation("ModeratorSeries") // ✅ sem to patrí
}

