generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model Category {
  id           Int              @id @default(autoincrement())
  name         String           @unique
  label        String
  icon         String?
  events       Event[]          @relation("EventCategories")
  users        User[]           @relation("UserInterests")
}

model User {
  id                   Int                      @id @default(autoincrement())
  email                String                   @unique
  password             String
  createdAt            DateTime                 @default(now())
  firstName            String
  lastName             String
  lastVerifiedAt       DateTime?
  verificationTokens   EmailVerificationToken[]
  events               Event[]                  @relation("UserEvents")
  interests            Category[]               @relation("UserInterests")
  joinedEvents         EventOccurrence[]        @relation("OccurrenceParticipants")
  joinedAttendancies   EventDay[]               @relation("EventDayAttendancy")
  moderatorIn          EventModerator[]         @relation("UserModerators")
  createdEventChanges  EventChange[]            @relation("CreatedBy")
  updatedEventChanges  EventChange[]            @relation("UpdatedBy")
  roomMembers          RoomMember[]
  messages             Message[]
  role                 Role     @default(USER)
}

enum Role {
  USER
  ADMIN
}

model Event {
  id                         Int               @id @default(autoincrement())
  title                      String  @db.VarChar(80)
  description                String? @db.Text
  startDate                  DateTime?
  endDate                    DateTime?
  repeatUntil                DateTime?
  repeatInterval             Int?
  hasStartDate               Boolean           @default(false)
  hasStartTime               Boolean           @default(false)
  hasEndTime                 Boolean           @default(false)
  location                   String? @db.VarChar(120)
  capacity                   Int?
  mainImage                  String?
  createdAt                  DateTime          @default(now())
  attendancyLimit            Int?
  allowRecurringAttendance   Boolean           @default(false)
  joinDaysBeforeStart        Int?
  organizerId                Int
  organizer                  User              @relation("UserEvents", fields: [organizerId], references: [id], onDelete: Cascade)
  gallery                    EventImage[]      @relation("EventToImages")
  moderators                 EventModerator[]  @relation("EventModerators")
  eventDays                  EventDay[]        @relation("EventToEventDays")
  eventOccurrences           EventOccurrence[] @relation("EventToOccurrences")
    categories                 Category[]        @relation("EventCategories")
    room      Room?

}

model EventDay {
  id              Int         @id @default(autoincrement())
  eventId         Int
  week            Int
  dayId           Int
  event           Event       @relation("EventToEventDays", fields: [eventId], references: [id], onDelete: Cascade)
  day             Day         @relation("DayToEventDays", fields: [dayId], references: [id])
eventChange   EventChange? @relation(fields: [eventChangeId], references: [id], onDelete: Cascade)
eventChangeId Int? @unique

  users           User[]      @relation("EventDayAttendancy")
  eventOccurrences EventOccurrence[] @relation("EventDayOccurrences")
}

model EventChange {
  id                        Int                       @id @default(autoincrement())
  eventDay                 EventDay?                  // ← Nepotrebuje `@relation`, už je definovaná opačne
  title                    String? @db.VarChar(80)
  description              String? @db.Text
  startDate                DateTime?
  endDate                  DateTime?
  hasStartDate            Boolean?           
  hasStartTime            Boolean?           
  hasEndTime              Boolean? 
  location                 String? @db.VarChar(120)
  capacity                 Int?
  joinDaysBeforeStart      Int?
  createdBy                Int?
  updatedBy                Int?
  createdByUser            User?       @relation("CreatedBy", fields: [createdBy], references: [id])
  updatedByUser            User?       @relation("UpdatedBy", fields: [updatedBy], references: [id])
  eventOccurrence EventOccurrence? @relation("OccurrenceToChange")

}


model EventOccurrence {
  id             Int           @id @default(autoincrement())
  eventId        Int
  date           DateTime?

  event          Event         @relation("EventToOccurrences", fields: [eventId], references: [id], onDelete: Cascade)
  participants   User[]        @relation("OccurrenceParticipants")
  eventDayId     Int?
  eventDay       EventDay?     @relation("EventDayOccurrences", fields: [eventDayId], references: [id],  onDelete: Cascade)

  eventChangeId Int? @unique
eventChange   EventChange? @relation("OccurrenceToChange", fields: [eventChangeId], references: [id], onDelete: Cascade)

@@unique([eventId, date])
}

model Day {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  eventDays EventDay[]  @relation("DayToEventDays")
}

model EventImage {
  id       Int    @id @default(autoincrement())
  url      String
  eventId  Int
  event    Event  @relation("EventToImages", fields: [eventId], references: [id], onDelete: Cascade)
}

model EventModerator {
  id                     Int     @id @default(autoincrement())
  userId                 Int
  user                   User    @relation("UserModerators", fields: [userId], references: [id], onDelete: Cascade)
  eventId                Int
  event                  Event @relation("EventModerators", fields: [eventId], references: [id], onDelete: Cascade)
  canEditEvent           Boolean @default(false)
  canManageParticipants  Boolean @default(false)
  canManageAttendees     Boolean @default(false)
  canManageModerators    Boolean @default(false)
  canRepostEvent         Boolean @default(false)
}

model Room {
  id        Int      @id @default(autoincrement())
  eventId   Int      @unique
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  members   RoomMember[]
  messages  Message[]
}

model RoomMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  roomId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  lastSeen  DateTime @default(now())

  @@unique([roomId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  roomId    Int
  userId    Int
  text      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}